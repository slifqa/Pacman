/*This source code copyrighted by Lazy Foo' Productions (2004-2015)
and may not be redistributed without written permission.*/

//Using SDL, SDL_image, standard IO, math, and strings
#include <SDL.h>
//#include <SDL_image.h>
#include <SDL_ttf.h>
#include <stdio.h>
#include <string>
#include <cmath>
#include <string>

#include <windows.h>
#include <ctime>

using namespace std;
//Screen dimension constants
const int SCREEN_WIDTH = 75 * 15;
const int SCREEN_HEIGHT = 50 * 15 + 70;

//Starts up SDL and creates window
bool init();

//Loads media
bool loadMedia();

//Frees media and shuts down SDL
void close();

//Loads individual image as texture
SDL_Texture* loadTexture(std::string path);

//The window we'll be rendering to
SDL_Window* gWindow = NULL;

//The window renderer
SDL_Renderer* gRenderer = NULL;

bool init()
{
	//Initialization flag
	bool success = true;

	//Initialize SDL
	if (SDL_Init(SDL_INIT_VIDEO) < 0)
	{
		printf("SDL could not initialize! SDL Error: %s\n", SDL_GetError());
		success = false;
	}
	else
	{
		//Set texture filtering to linear
		if (!SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1"))
		{
			printf("Warning: Linear texture filtering not enabled!");
		}

		//Create window
		gWindow = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
		if (gWindow == NULL)
		{
			printf("Window could not be created! SDL Error: %s\n", SDL_GetError());
			success = false;
		}
		else
		{
			//Create renderer for window
			gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);
			if (gRenderer == NULL)
			{
				printf("Renderer could not be created! SDL Error: %s\n", SDL_GetError());
				success = false;
			}
			else
			{
				//Initialize renderer color
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);

				////Initialize PNG loading
				//int imgFlags = IMG_INIT_PNG;
				//if (!(IMG_Init(imgFlags) & imgFlags))
				//{
				//  printf("SDL_image could not initialize! SDL_image Error: %s\n", IMG_GetError());
				//  success = false;
				//}
			}
		}
	}

	return success;
}

bool loadMedia()
{
	//Loading success flag
	bool success = true;

	//Nothing to load
	return success;
}

void close()
{
	//Destroy window   
	SDL_DestroyRenderer(gRenderer);
	SDL_DestroyWindow(gWindow);
	gWindow = NULL;
	gRenderer = NULL;

	//Quit SDL subsystems
	//IMG_Quit();
	SDL_Quit();
}

//SDL_Texture* loadTexture(std::string path)
//{
//  //The final texture
//  SDL_Texture* newTexture = NULL;
//
//  //Load image at specified path
//  SDL_Surface* loadedSurface = IMG_Load(path.c_str());
//  if (loadedSurface == NULL)
//  {
//      printf("Unable to load image %s! SDL_image Error: %s\n", path.c_str(), IMG_GetError());
//  }
//  else
//  {
//      //Create texture from surface pixels
//      newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
//      if (newTexture == NULL)
//      {
//          printf("Unable to create texture from %s! SDL Error: %s\n", path.c_str(), SDL_GetError());
//      }
//
//      //Get rid of old loaded surface
//      SDL_FreeSurface(loadedSurface);
//  }
//
//  return newTexture;
//}










const int ROW = 18;
const int COL = 32;
const int ENEMIES = 3;

char map[ROW][COL]; 

char map_easy[ROW][COL] = {		
	"+-----------------------------+",
	"|                             |",
	"|  ###   ###   ###   ###   ## |",
	"|      #     #     #     #    |",
	"|  ###   ###   ###   ###   ## |",
	"|                             |",
	"|  ###   ###   ###   ###   ## |",
	"|      #     #     #     #    |",
	"|  ###   ###   ###   ###   ## |",
	"|                             |",
	"|  ###   ###   ###   ###   ## |",
	"|      #     #     #     #    |",
	"|  ###   ###   ###   ###   ## |",
	"|                             |",
	"|  ###   ###   ###   ###   ## |",
	"|      #     #     #     #    |",
	"|                             |",
	"+-----------------------------+"
};

char map_normal[ROW][COL] = {	
	"+-----------------------------+",
	"|    ##    ##    ##    ##     |",
	"| ##    ##    ##    ##    ##  |",
	"|    ####   ####  #####   ### |",
	"|###    ###   ##   ##    ##   |",
	"|    ##    ##    ##    ##     |",
	"| ##    ##    ##    ##    ##  |",
	"|    ####   ####  #####   ### |",
	"|###    ###   ##   ##    ##   |",
	"|    ##    ##    ##    ##     |",
	"| ##    ##    ##    ##    ##  |",
	"|    ####   ####  #####   ### |",
	"|###    ###   ##   ##    ##   |",
	"|    ##    ##    ##    ##     |",
	"| ##    ##    ##    ##    ##  |",
	"|    ####   ####  #####   ### |",
	"|                             |",
	"+-----------------------------+"
};

char map_hard[ROW][COL] = {		
	"+-----------------------------+",
	"|   ###     ##       ##   ####|",
	"| ###   ##   #   ##   #  ##  #|",
	"| #   ###   ##   #   ##      #|",
	"| #  ##     ###  #    #   #  #|",
	"|   ##   #       #   ##  ##  #|",
	"|# #####    #  ###       #   #|",
	"|#     ######   ###  #####   #|",
	"|#  ##  ##     ##     ##    ##|",
	"|   ###     ##       ##   ####|",
	"| ###   ##   #   ##   #  ##  #|",
	"| #   ###   ##   #   ##      #|",
	"| #  ##     ###  #    #   #  #|",
	"|   ##   #       #   ##  ##  #|",
	"|# #####    #  ###       #   #|",
	"|#     ######   ###  #####   #|",
	"|###                        ##|",
	"+-----------------------------+"
};

void setMap(char mapToSet[ROW][COL]) 
{
	for (int i = 0; i < 18; i++)
		for (int j = 0; j < 32; j++)
		{
			map[i][j] = mapToSet[i][j]; 
		}
}


void setDots() 
{
	

	for (int i = 0; i < ROW; i++)
		for (int j = 0; j < COL; j++) 
			if (map[i][j] == ' ' && (rand() % 15) == 0) 
			{
				map[i][j] = '.'; 
			}


}

void setEnemiesCords(int *ex, int *ey, int numOfEnemies) 
{
	for (int i = 0; i < numOfEnemies; i++) 
	{
		do { 
			ex[i] = rand() % COL;
			ey[i] = rand() % ROW;

		} while (map[ey[i]][ex[i]] != ' ');

	}

}




bool isEndOfGame() 
{
	bool result = true; 
	for (int i = 0; i < ROW; i++)
		for (int j = 0; j < COL; j++) 
			if (map[i][j] == '.') 
			{
				result = false;
			}


	return result;
}




struct Point { 
	int x;
	int y;
};


void fill(int binaryMap[ROW][COL], int distanceArray[ROW][COL], int x, int y, int currentDistance) 
{


	distanceArray[x][y] = currentDistance;

	if (x + 1 < ROW && binaryMap[x + 1][y] == 1 && (distanceArray[x + 1][y] == 0 || distanceArray[x + 1][y] > currentDistance + 1))
		fill(binaryMap, distanceArray, x + 1, y, currentDistance + 1);
	if (x - 1 >= 0 && binaryMap[x - 1][y] == 1 && (distanceArray[x - 1][y] == 0 || distanceArray[x - 1][y] > currentDistance + 1))
		fill(binaryMap, distanceArray, x - 1, y, currentDistance + 1);
	if (y + 1 < COL && binaryMap[x][y + 1] == 1 && (distanceArray[x][y + 1] == 0 || distanceArray[x][y + 1] > currentDistance + 1))
		fill(binaryMap, distanceArray, x, y + 1, currentDistance + 1);
	if (y - 1 >= 0 && binaryMap[x][y - 1] == 1 && (distanceArray[x][y - 1] == 0 || distanceArray[x][y - 1] > currentDistance + 1))
		fill(binaryMap, distanceArray, x, y - 1, currentDistance + 1);

}


Point findNextStep(int tmp[ROW][COL], int startX, int startY, int x, int y) 
{
	int currentDist = tmp[x][y];
	if (x + 1 < ROW && tmp[x + 1][y] == currentDist - 1)
		if (x + 1 == startX && y == startY)
			return Point{ x, y };
		else
			return findNextStep(tmp, startX, startY, x + 1, y);

	else if (x - 1 >= 0 && tmp[x - 1][y] == currentDist - 1)
		if (x - 1 == startX && y == startY)
			return Point{ x, y };
		else
			return findNextStep(tmp, startX, startY, x - 1, y);

	else if (y + 1 < COL && tmp[x][y + 1] == currentDist - 1)
		if (x == startX && y + 1 == startY)
			return Point{ x, y };
		else
			return findNextStep(tmp, startX, startY, x, y + 1);
	else if (y - 1 >= 0 && tmp[x][y - 1] == currentDist - 1)
		if (x == startX && y - 1 == startY)
			return Point{ x, y };
		else
			return findNextStep(tmp, startX, startY, x, y - 1);


}

void mapToBinary(int array[ROW][COL]) 
{
	for (int i = 0; i < ROW; i++)
		for (int j = 0; j < COL; j++)
			if (map[i][j] == ' ' || map[i][j] == '.')
				array[i][j] = 1;
			else
				array[i][j] = 0;

}

Point getNextStep(int binaryMap[ROW][COL], int ex, int ey, int x, int y) 
{
	int distanceArray[ROW][COL]; 
	for (int i = 0; i < ROW; i++)
		for (int j = 0; j < COL; j++)
			distanceArray[i][j] = 0;

	fill(binaryMap, distanceArray, ex, ey, 1); 

	Point nextStep = findNextStep(distanceArray, ex, ey, x, y); 

	return nextStep; 

}


void printMap()
{
	for (int i = 0; i < ROW; i++)
		for (int j = 0; j < COL; j++)
			if (map[i][j] == '.')
			{
				int distance = (15 - 3) / 2;

				SDL_Rect fillRect = { j * 15 + distance, i * 15 + distance, 3, 3 };
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0x00, 0xFF);
				SDL_RenderFillRect(gRenderer, &fillRect);
			}

			else if (map[i][j] != ' ')
			{
				SDL_Rect fillRect = { j * 15, i * 15, 15, 15 };
				SDL_SetRenderDrawColor(gRenderer, 0x00, 0x80, 0x00, 0xFF);
				SDL_RenderFillRect(gRenderer, &fillRect);
			}

}


void printPlayer(int x, int y)
{

	int distance = (15 - 11) / 2;

	SDL_Rect fillRect = { x * 15 + distance, y * 15 + distance, 11, 11 };
	SDL_SetRenderDrawColor(gRenderer, 0xFF, 0x00, 0x00, 0xFF);
	SDL_RenderFillRect(gRenderer, &fillRect);
}


void printEnemy(int x, int y)
{

	int distance = (15 - 9) / 2;

	SDL_Rect fillRect = { x * 15 + distance, y * 15 + distance, 9, 9 };
	SDL_SetRenderDrawColor(gRenderer, 0x00, 0x00, 0xFF, 0xFF);
	SDL_RenderFillRect(gRenderer, &fillRect);
}


void printText(int x, int y, string message)
{
	TTF_Init();

	//if (TTF_Init() < 0) {

	//  int y = 0;
	//  // Handle error...
	//}
	TTF_Font* Sans = TTF_OpenFont("Sans.ttf", 24); //this opens a font style and sets a size

	SDL_Color White = { 255, 255, 255 };  // this is the color in rgb format, maxing out all would give you the color white, and it will be your text's color

	SDL_Surface* surfaceMessage = TTF_RenderText_Solid(Sans, message.c_str(), White); // as TTF_RenderText_Solid could only be used on SDL_Surface then you have to create the surface first

	SDL_Texture* Message = SDL_CreateTextureFromSurface(gRenderer, surfaceMessage); //now you can convert it into a texture

	SDL_Rect Message_rect; //create a rect
	Message_rect.x = x;  //controls the rect's x coordinate
	Message_rect.y = y; // controls the rect's y coordinte
	Message_rect.w = message.length() * 10; // controls the width of the rect
	Message_rect.h = 30; // controls the height of the rect

	//Mind you that (0,0) is on the top left of the window/screen, think a rect as the text's box, that way it would be very simple to understance

	//Now since it's a texture, you have to put RenderCopy in your game loop area, the area where the whole code executes

	SDL_RenderCopy(gRenderer, Message, NULL, &Message_rect); //you put the renderer's name first, the Message, the crop size(you can ignore this if you don't want to dabble with cropping), and the rect which is the size and coordinate of your texture

	//Don't forget too free your surface and texture

}

int game(int speedmod)
{
	//Event handler
	SDL_Event e;

	srand(time(0));

	int x = 15; 
	int y = 16; 



	setDots();


	
	int enemiesX[ENEMIES]; 
	int enemiesY[ENEMIES];
	int enemiesSpeeds[ENEMIES]; 


	setEnemiesCords(enemiesX, enemiesY, ENEMIES);

	for (int i = 0; i < ENEMIES; i++) 
	{
		enemiesSpeeds[i] = speedmod + rand() % 5; 
	}


	int binaryMap[ROW][COL]; 
	mapToBinary(binaryMap);



	//SDL_SetRenderDrawColor(gRenderer, 0, 0, 0, 0);
	SDL_RenderClear(gRenderer);

	printMap();
	printPlayer(x, y);





	SDL_RenderPresent(gRenderer);


	

	int frame = 0; 

	int score = 0; 

	

	bool running = true; 

	//While application is running
	while (isEndOfGame() == false && running == true)
	{
		//Handle events on queue
		while (SDL_PollEvent(&e) != 0)
		{
			//User requests quit
			if (e.type == SDL_QUIT)
			{
				running = false;
			}
			else if (e.type == SDL_KEYDOWN)
			{

				//Select surfaces based on key press
				switch (e.key.keysym.sym)
				{
				case SDLK_UP:
					if (map[y - 1][x] == '.') {
						y--; score++; map[y][x] = ' '; 
					}
					else
						if (map[y - 1][x] == ' ') y--; 
					break;

				case SDLK_DOWN:
					if (map[y + 1][x] == '.') {
						y++; score++; map[y][x] = ' ';
					}
					else
						if (map[y + 1][x] == ' ') y++;
					break;

				case SDLK_LEFT:
					if (map[y][x - 1] == '.') { x--; score++; map[y][x] = ' '; }
					else
						if (map[y][x - 1] == ' ') x--;
					break;

				case SDLK_RIGHT:
					if (map[y][x + 1] == '.') {
						x++; score++; map[y][x] = ' ';
					}
					else
						if (map[y][x + 1] == ' ') x++;
					break;

				default:
					break;
				}
			}
		}

		

		for (int i = 0; i < ENEMIES; i++) 
			if (frame%enemiesSpeeds[i] == 0) 
			{
				Point p = getNextStep(binaryMap, enemiesY[i], enemiesX[i], y, x);

				enemiesX[i] = p.y;
				enemiesY[i] = p.x;

				
				
			}
		



		//Clear screen
		SDL_SetRenderDrawColor(gRenderer, 0, 0, 0, 0);
		SDL_RenderClear(gRenderer);

		for (int i = 0; i < ENEMIES; i++) 
		{
			printEnemy(enemiesX[i], enemiesY[i]);

			if (enemiesX[i] == x && enemiesY[i] == y) 
			{
				running = false;
			}
		}



		printMap();
		printPlayer(x, y);
		printText(100, 18 * 15 + 10, "Wynik:    " + to_string(score));




		SDL_RenderPresent(gRenderer);
		frame++; 
		Sleep(100);
	}

	if (isEndOfGame() == true)
	{
		return score;
	}

	if (running == false)
	{
		return 0;
	}


}


int main(int argc, char* args[])
{
	//Start up SDL and create window
	if (!init())
	{
		printf("Failed to initialize!\n");
	}
	else
	{
		//Load media
		if (!loadMedia())
		{
			printf("Failed to load media!\n");
		}
		else
		{
			SDL_SetRenderDrawColor(gRenderer, 0, 0, 0, 0);
			SDL_RenderClear(gRenderer);
			printText(150, 30, "Pacman by Adam Sliwinski");
			printText(30, 100, "INSTRUKCJA:");
			printText(30, 150, "- Uzywaj strzalek (gora/dol/prawo/lewo) do poruszania sie");
			printText(30, 200, "- Zbierz wszystkie punkty i unikaj przeciwnikow");

			printText(150, 250, "Wybierz poziom trudnosci gry:");

			printText(30, 300, "L - latwy");
			printText(30, 350, "N - normalny");
			printText(30, 400, "T - trudny");

			SDL_RenderPresent(gRenderer);

			SDL_Event e;

			//      char level = 'E'; 
			////cin >> level;

			int speedmod = 0; 

			while (speedmod == 0)
			{
				//Handle events on queue
				while (SDL_PollEvent(&e) != 0)
				{
					if (e.type == SDL_KEYDOWN)
					{

						//Select surfaces based on key press
						switch (e.key.keysym.sym)
						{
						case SDLK_l:
							speedmod = 3;
							setMap(map_easy);
							break;

						case SDLK_n:
							speedmod = 2;
							setMap(map_normal);
							break;

						case SDLK_t:
							speedmod = 1;
							setMap(map_hard);
							break;

						}
					}
				}


			}

			int score = game(speedmod);

			SDL_SetRenderDrawColor(gRenderer, 0, 0, 0, 0);
			SDL_RenderClear(gRenderer);
			if (score == 0)
			{
				printText(30, 100, "Przegrana.");
			}
			else
			{
				printText(20, 100, "Wygrana!");
				printText(20, 150, "Zdobyto " + to_string(score) + " punkty/punktow!");

			}
			SDL_RenderPresent(gRenderer);

			bool quit = false;
			//Handle events on queue
			while (quit == false)
			{
				while (SDL_PollEvent(&e) != 0)
				{
					//User requests quit
					if (e.type == SDL_QUIT)
					{
						quit = true;
					}

				}
			}


			//Free resources and close SDL
			close();

			return 0;
		}
	}
}
